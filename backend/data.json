{
  "text": "<p>//Exclude fields</p><p>const usersNoPassword = User.find({}).select(\"-password -createdAt\").exec()</p><p><br></p><p>//Include fields</p><p>const usersOnlyNameEmail = User.find({}).select(\"fullName email\").exec()</p><p><br></p><p>//Chained filters + sort + skip/limit</p><p>const adults = User.find({}).where({ age: { $gte: 18 ) }).sort({ age: -1 }).skip(0).limit(2).select(\"-password\").exec()</p><p>// ✅ OR example</p><p>Message.find({</p><p>$or: [</p><p>{ senderId: myId, receiverId: userToChatId },</p><p>{ senderId: userToChatId, receiverId: myId }</p><p>]</p><p>}).exec()</p><p><br></p><p>// ✅ AND example</p><p>User.find({</p><p>$and: [</p><p>{ role: \"teacher\" },</p><p>{ isActive: true }</p><p>]</p><p>}).exec()</p><p><br></p><p>// ✅ NOR example</p><p>User.find({</p><p>$nor: [</p><p>{ role: \"admin\" },</p><p>{ role: \"superuser\" }</p><p>]</p><p>}).exec()</p><p><br></p><p>// ✅ NOT example (exclude exact match)</p><p>User.find({</p><p>role: { $not: { $e</p><p>q: \"student\" } }</p><p>}).exec()</p><p><strong>DB ends here</strong></p><p><br></p><p>import express from \"express\";</p><p>import multer from \"multer\";</p><p>import cors from \"cors\";</p><p>import fs from \"fs\";</p><p>import path from \"path\";</p><p>import { fileURLToPath } from \"url\";</p><p>import { createServer } from \"http\";</p><p>import { Server } from \"socket.io\";</p><p><br></p><p>const __filename = fileURLToPath(import.meta.url);</p><p>const __dirname = path.dirname(__filename);</p><p><br></p><p>const app = express();</p><p>app.use(cors());</p><p>app.use(express.json());</p><p><br></p><p>const httpServer = createServer(app);</p><p>const io = new Server(httpServer, { cors: { origin: \"*\" } });</p><p><br></p><p>const uploadsDir = path.join(__dirname, \"uploads\");</p><p>const dataFile = path.join(__dirname, \"uploads.json\");</p><p><br></p><p>// Ensure folders/files exist</p><p>if (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir);</p><p>if (!fs.existsSync(dataFile)) fs.writeFileSync(dataFile, JSON.stringify([]));</p><p><br></p><p>// Multer storage</p><p>const storage = multer.diskStorage({</p><p>destination: (req, file, cb) =&gt; cb(null, uploadsDir),</p><p>filename: (req, file, cb) =&gt; {</p><p>const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);</p><p>cb(null, uniqueSuffix + path.extname(file.originalname));</p><p>},</p><p>});</p><p>const upload = multer({ storage });</p><p><br></p><p>// Upload files</p><p>app.post(\"/upload\", upload.array(\"files\", 20), (req, res) =&gt; {</p><p>const filesData = req.files.map((file) =&gt; ({</p><p>id: Date.now() + \"-\" + Math.round(Math.random() * 1e9),</p><p>originalname: file.originalname,</p><p>filename: file.filename,</p><p>path: `/uploads/${file.filename}`,</p><p>size: file.size,</p><p>mimetype: file.mimetype,</p><p>uploadedAt: new Date().toISOString(),</p><p>}));</p><p><br></p><p>const currentData = JSON.parse(fs.readFileSync(dataFile, \"utf-8\"));</p><p>const updatedData = [...currentData, ...filesData];</p><p>fs.writeFileSync(dataFile, JSON.stringify(updatedData, null, 2));</p><p><br></p><p>// Emit new files to all clients</p><p>io.emit(\"new-files\", filesData);</p><p><br></p><p>res.json({ message: \"Files uploaded!\", files: filesData });</p><p>});</p><p><br></p><p>// Get all files</p><p>app.get(\"/files\", (req, res) =&gt; {</p><p>const data = JSON.parse(fs.readFileSync(dataFile, \"utf-8\"));</p><p>res.json(data);</p><p>});</p><p><br></p><p>// Delete file</p><p>app.delete(\"/files/:id\", (req, res) =&gt; {</p><p>const fileId = req.params.id;</p><p>const currentData = JSON.parse(fs.readFileSync(dataFile, \"utf-8\"));</p><p>const fileToDelete = currentData.find((f) =&gt; f.id === fileId);</p><p><br></p><p>if (!fileToDelete) return res.status(404).json({ error: \"File not found\" });</p><p><br></p><p>const filePath = path.join(uploadsDir, fileToDelete.filename);</p><p>if (fs.existsSync(filePath)) fs.unlinkSync(filePath);</p><p><br></p><p>const updatedData = currentData.filter((f) =&gt; f.id !== fileId);</p><p>fs.writeFileSync(dataFile, JSON.stringify(updatedData, null, 2));</p><p><br></p><p>// Emit deleted file event</p><p>io.emit(\"delete-file\", fileId);</p><p><br></p><p>res.json({ message: \"File deleted\", id: fileId });</p><p>});</p><p><br></p><p>// Serve uploads</p><p>app.use(\"/uploads\", express.static(uploadsDir));</p><p><br></p><p>// Socket.IO connection</p><p>io.on(\"connection\", (socket) =&gt; {</p><p>console.log(\"New client connected:\", socket.id);</p><p>socket.on(\"disconnect\", () =&gt; {</p><p>console.log(\"Client disconnected:\", socket.id);</p><p>});</p><p>});</p><p><br></p><p>import multer from \"multer\"</p><p><br></p><p>const storage = multer.diskStorage({</p><p>destination: (req, file,cb) =&gt; cb(null, \"uploads/\"),</p><p>filename: (req, file,cb) =&gt; cb(null, Date.now()+\"-\"+file.originalName)</p><p>})</p><p><br></p><p>export const upload = multer({ storage })</p><p>router.put(\"/update-profile\", authMiddleware, upload.single(\"profilePic\"), updateProfile)</p>"
}